@page "/"
@inject IJSRuntime mJS

<PageTitle>Audio Recorder</PageTitle>

<!-- Container for the recording UI: a canvas for wave animation and a microphone button -->
<div class="recorder-container">
    <!-- Canvas element for real-time wave animation based on audio input -->
    <canvas id="waveCanvas"></canvas>

    <!-- Microphone button to start recording -->
    <button @onclick="butRecordAudioStart_Click" class="btn mic-btn" id="micButton">
        <span class="oi oi-microphone" aria-hidden="true"></span>
    </button>
</div>

@code {
    string mUrl; // Stores the audio file URL generated after recording stops
    bool isInitialized = false; // Flag to ensure JS initialization happens only once

    // Called after the component has rendered; ensures JavaScript initializes after DOM elements are available
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            isInitialized = true;
            await mJS.InvokeVoidAsync("BlazorAudioRecorder.Initialize", DotNetObjectReference.Create(this));
        }
    }

    // Called when the microphone button is clicked to start recording
    void butRecordAudioStart_Click()
    {
        mUrl = ""; // Reset the audio URL
        mJS.InvokeVoidAsync("BlazorAudioRecorder.StartRecord");
    }

    // Called by JavaScript with the audio URL when recording is stopped
    [JSInvokable]
    public async Task OnAudioUrl(string vUrl)
    {
        mUrl = vUrl; // Update the URL to play the recorded audio
        await InvokeAsync(() => StateHasChanged()); // Trigger a UI update
    }
}
